name: Publish Blog Posts

on:
  push:
    paths:
      - "posts/*.md"
      - "posts/images/**"
  schedule:
    - cron: "0 13 * * 2,4"
    - cron: "0 15 * * 6"
  workflow_dispatch:

jobs:
  check-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Check post timing
        id: timing-check
        run: |
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "Proceeding with scheduled post"
            echo "PUBLISH_DELAY=0" >> $GITHUB_ENV
          else
            # Calculate delay to next optimal posting time
            HOUR_UTC=$(date -u +%H)
            DOW=$(date -u +%u)  # 1-7 (Monday-Sunday)
            
            if [[ $DOW == "2" || $DOW == "4" ]] && [[ $HOUR_UTC -lt 13 ]]; then
              # Wait until 13:00 UTC on Tuesday/Thursday
              DELAY=$(( (13 - HOUR_UTC) * 3600 ))
            elif [[ $DOW == "6" ]] && [[ $HOUR_UTC -lt 15 ]]; then
              # Wait until 15:00 UTC on Saturday
              DELAY=$(( (15 - HOUR_UTC) * 3600 ))
            else
              # Wait for next optimal time slot
              echo "Queuing for next optimal posting time"
              DELAY=3600  # Default 1-hour delay if outside optimal windows
            fi
            
            echo "PUBLISH_DELAY=$DELAY" >> $GITHUB_ENV
          fi

      - name: Wait for optimal posting time
        if: github.event_name == 'push'
        run: |
          echo "Waiting for $PUBLISH_DELAY seconds to reach optimal posting time..."
          sleep $PUBLISH_DELAY

      - name: Download tracking data
        run: |
          mkdir -p .tracking
          if [ -f ".tracking/published_posts.json" ]; then
            echo "Using existing tracking data"
          else
            echo "{}" > .tracking/published_posts.json
          fi

      - name: Run publication script
        env:
          MEDIUM_TOKEN: ${{ secrets.MEDIUM_TOKEN }}
          DEVTO_API_KEY: ${{ secrets.DEVTO_API_KEY }}
          MARKDOWN_DIR: ./posts
          HTML_OUTPUT_DIR: ./dist
          PYTHONPATH: ${{ github.workspace }}
        run: |
          # Create __init__.py files to make directories into Python packages
          touch __init__.py
          touch scripts/__init__.py
          touch scripts/utils/__init__.py
          touch scripts/config/__init__.py

          # Run the script
          python scripts/publish_posts.py

          - name: Commit tracking data
          run: |
            git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            git add .tracking/published_posts.json
            git diff --quiet && git diff --staged --quiet || git commit -m "Update published posts tracking data [skip ci]"
            git push origin HEAD:${GITHUB_REF}
          env:
            GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
