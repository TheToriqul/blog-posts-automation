name: Publish Blog Posts

on:
  push:
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    
    - name: Initialize tracking directory
      run: |
        mkdir -p .tracking
        echo '{"last_run": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'", "posts": {}}' > .tracking/published_posts.json
        chmod -R 777 .tracking  # Ensure directory is writable
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create required directories
      run: |
        mkdir -p posts
        mkdir -p dist
        mkdir -p logs
        
    - name: Verify environment
      run: |
        echo "Directory Structure:"
        ls -la
        echo "\nTracking Directory:"
        ls -la .tracking/
        echo "\nTracking File Contents:"
        cat .tracking/published_posts.json
        echo "\nPosts Directory:"
        ls -la posts/
        
    - name: Run publication script with error handling
      env:
        MEDIUM_TOKEN: ${{ secrets.MEDIUM_TOKEN }}
        DEVTO_API_KEY: ${{ secrets.DEVTO_API_KEY }}
        MARKDOWN_DIR: ./posts
        HTML_OUTPUT_DIR: ./dist
      run: |
        # Create a wrapper script
        cat > run_with_logging.py << 'EOF'
        import sys
        import traceback
        import logging
        from pathlib import Path
        
        # Set up logging
        logging.basicConfig(
            level=logging.DEBUG,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('logs/debug.log'),
                logging.StreamHandler(sys.stdout)
            ]
        )
        
        logger = logging.getLogger('publication_wrapper')
        
        try:
            logger.info("Starting publication process")
            
            # Verify directories
            Path('.tracking').mkdir(exist_ok=True)
            Path('posts').mkdir(exist_ok=True)
            Path('dist').mkdir(exist_ok=True)
            
            # Import and run main script
            from scripts.publish_posts import main
            main()
            
        except Exception as e:
            logger.error(f"Error in publication process: {str(e)}")
            logger.error(traceback.format_exc())
            sys.exit(1)
        EOF
        
        # Run the wrapper script
        python run_with_logging.py
        
        # Show logs if script failed
        if [ $? -ne 0 ]; then
          echo "Script failed. Debug logs:"
          cat logs/debug.log
        fi
        
    - name: Preserve tracking data
      if: always()  # Run even if previous steps failed
      run: |
        if [ -d ".tracking" ]; then
          cp -r .tracking tracking_backup
        fi
        
    - name: Upload tracking data
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: tracking-data
        path: tracking_backup/
        retention-days: 90
        
    - name: Upload debug logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: debug-logs
        path: logs/
        retention-days: 5